Creating Animated GIFs
Golang Vancouver meetup 
9 Apr 2014

@javouhey

* Motivation

- seneca's mission statement 

    Generate small animated GIFs from youtube videos

- Cross-platform
# I develop on ubuntu & test on windows
- Visual feedback
- Simple & naive
- *Lessons* to share:

    - Empty structs
    - Type-safe Enums
    - Channel cancellation
    - Reproducible builds

* GIF 1 (~681 KB)

.link http://www.reddit.com/user/BigMurph26 www.reddit.com/user/BigMurph26

.image snake-costa-rica.gif

* GIF 2 (1.1 MB) 

.link http://www.reddit.com/user/hbeckwith www.reddit.com/user/hbeckwith

.image bladerunner.gif 

* GIF 3 (1.6 MB)

.link http://www.reddit.com/user/ARS_ www.reddit.com/user/ARS_

.image buda.gif 450 800

* How to create animated gifs

- Imagemagick
- gifsicle
- *ffmpeg*
   idiosyncrasies 
     - stderr
     - order of arguments
     - even dimensions

.image van/ffmpeg-logo.png

* What's in an animated GIF ? (4 MB)

.image kenyan.gif 170 290

.link http://youtu.be/mTMgIViinuQ youtu.be/mTMgIViinuQ 

    $ gifsicle -I moses-animated.gif
    
    36 images
    logical screen 426x238
    loop forever
    + image #0 426x238 local color table [256]
      disposal asis delay 0.05s
    + image #1 426x238 local color table [256]
      disposal asis delay 0.06s
    ....snipped....

* Costa Rican snake (~681 KB)

.code van/snake.go 

* seneca: 3-step process

1. Install seneca & ffmpeg

.link http://ffmpeg.org/ ffmpeg 2.1.4
.link https://github.com/javouhey/seneca github.com/javouhey/seneca

2. Download mp4 / flv

    $ youtube-dl -f 18 <video_url>

3. Trial & error until we get a reasonably sized GIF. Size depends on roughly 3 things.
# Number of frames
# Dimensions of the frames
# Color depth of each frame (8 bits max)

    $ seneca -video-infile=moses.mp4 -from 00:01:00 -length 5s -vv -dry-run

    Video metadata
    --------------
       Duration: 145
    Size  (wxh): 426x240
    Fps (Hertz): 23.980000
    ... snipped ...

#Extra step: Optimize generated animated GIF using tools e.g. gifsicle

* Changing speed (slow=3.7MB vs. veryfast=1.5MB)

.image slower-3s-moses-18.gif 156 280 
.code van/moses-slow.go HLspe

.image veryfast-moses-18.gif 156 280
.code van/moses-veryfast.go HLsp2

* Lesson #1: empty struct

Problem: modelling a set of values

.code van/speed1.go

* Lesson #1: empty struct (cont.)

An empty struct has zero memory allocations.

.code van/speed2.go

Two different interpretation:

- `interface{}` stands for the concept of `Any`
- `struct{}` stands for the concept of `Nothing`

* Lesson #1: empty struct (cont.)

Next incarnation of my map:

.code van/speed3.go

More idiomatic:

    var speeds = map[string]bool { ... }

    arg := "placebo"
    if speeds[arg] {
        // arg exists in `speeds`
    }

* Scaling (4.9MB)

.image zlatan.gif 200 290

- 6MB file rejected by imgur.
.code van/zlatan.go HLspe
- The *_* placeholder inspired by `Go`
    -scale _:_     
    -scale 203:405 (INVALID)
# libx264 encoder only accepts even dimensions.

* Lesson #2: Type-safe Enums

- Go does not have type-safe enums. 

.code van/scale.go

    fmt.Printf("%d %d %d", WidthOnly, HeightOnly, WidthHeight)

Output

    1 2 4

* Lesson #2: Type-safe Enums (cont.)

.code van/scale2.go

- This does not limit the scope of values:

    Rescale(1)
    Rescale(WidthOnly)
    Rescale(99)

Output

    1
    1
    99

* Lesson #2: Type-safe Enums (cont.)

Solution: implement range checks for the type of your constants.

.code van/scalefix.go

.link http://play.golang.org/p/zlpORmC3u1 play.golang.org/p/zlpORmC3u1

* Lesson #3: Building HTTP servers is a cinch

- *Problem* `ffmpeg` may take a long time to complete.

    $ ffmpeg -progress http://host:port ...

Listen for pings:

.code van/pings.go

* Lesson #3: Goroutine HTTP Listener (cont.)
# why is it a pointer to channel. Can it be normal reference type ?
.code van/progress.go 

- *Responsibilities*: 
- a) Listens for `ffmpeg` pings on port 8080 (default)
- b) Forwards statuses to the Status Logger.

* Lesson #3: Goroutine Status Logger (cont.)

.code van/statuslogger.go 

- Output:

    54 77 104 Completed
    72 91 120 Completed
    33 60 82 108 Completed

- It is not necessary to close channels. (_Discuss_)
#do close the channel iff some receivers are expecting it.
- A closed channel can only be read from, writing to it panics. (_Discuss_) 
#in seneca, I close the TCP listener first before closing the channel
#closing should be done by the sender, never the receiver.

* Interlude

.link http://www.reddit.com/user/BigMurph26 www.reddit.com/user/BigMurph26

.image y0yUSUL-iceland.gif 310 800

* Communicating with goroutines

- `ffmpeg` pipeline

.image van/pipeline.png 250 500

- *Goal* each stage is an executing goroutine
- q1) How do I know if an error happened ?
- q2) How do I wait for it to complete ?
- q3) How to cancel a running goroutine ? 

* Communicating with goroutines (cont.)

- Stage 1: writes video frames to PNGs (q1 & q2)

.code van/task1.go

- `Run` returns an unbuffered channel

    <-chan error

* Communicating with goroutines (cont.)

- Stage 2: h.264 encoding (q1 & q2)
- Returns error in a field

    type Muxer struct {
        err error
    }

- `Run` returns a `*sync.WaitGroup`
#WaitGroup is a struct and behaves like a counting semaphore

.code van/task2.go

* Closing channel as signalling

- A receive operation on a closed channel never blocks.
- For a closed channel *c*, `ok` is `false`:

    x, ok := <- c

- *Example*: generator of _even_ numbers
# zero is even

.code van/even1.go

* Closing channel as signalling (cont.)

.code van/even2.go

Output

.code van/even3.go

* Communicating with goroutines (cont.)

- Stage 3: MP4 to GIF
- The `tomb` package encapsulates the goroutine signalling pattern

.code van/tomb.go

- wait for the completion

.code van/tomb3.go

* Communicating with goroutines (cont.)

- Cooperatively stop a running goroutine 

.code van/tomb4.go

- Check for the cancellation signal

.code van/tomb2.go


* Lesson #4: build process

- Maintain a symbolic version:

   $ seneca -version

Output:

   Seneca version 1.0.0-beta3, git SHA 4d95362aff7a9a5ab1b9cd677c272c10e3b52a09

- Smaller binary size 
.link https://code.google.com/p/go/issues/detail?id=6853 Issue #6853 : Binaries too big and growing
# tagged for go1.4

.image van/exe-size.png

* Lesson #4: build process (cont.)

.image van/dir-mysources.png

This still *works* but ...

    $ go get -x github.com/javouhey/seneca

* Lesson #4: build process (cont.)

.image van/dir-src-symbolic-link.png

.code van/build.go
# -w removes the DWARF information which allows for debugging

Inspired by:

.link https://github.com/coreos/etcd github.com/coreos/etcd

* Interlude

.image NataliaPoklonskaya-Ukraine-AG.gif 400 650

* Lesson #5: Reproducible builds

.link https://groups.google.com/forum/#!msg/golang-nuts/2Xluuq6hmc4/AeJRu8f0R7wJ source
.code van/versioning.go

- Tip of default branch always pristine ?
- 12-factor app rule:

.link http://12factor.net/dependencies 12factor.net/dependencies

    Explicitly declare and isolate dependencies 


* Lesson #5: Put the version explicitly in the import path

.link http://labix.org/gopkg.in labix.org/gopkg.in

Download a branch/tag for `iter` named v4

    go get gopkg.in/javouhey/iter.v4

A new branch `v4.2` is released

    go get -u gopkg.in/javouhey/iter.v4 

will pull down the new fixes/improvement to `v4` (stable API)

.code van/gopkg1.go

*Constraint* Github hosted packages only

* Lesson #5: Git submodules

- Pins the submodule to the current *HEAD* of default branch

    $ git submodule add https://github.com/stretchr/testify.git 
                        vendor/github.com/stretchr/testify

- Reproducible (detached HEAD):

.code van/submodule.go

- Git >= 1.8.2 can make submodules track upstream branches.

    $ git submodule update vendor/github.com/stretchr/testify

* Lesson #5: Vendor 

Take 3rd party code & check it into your project's repo.

.image van/dir-vendor.png 180 400

    import (
        "github.com/javouhey/seneca/vendor/launchpad.net/tomb"
        "github.com/javouhey/seneca/vendor/labix.org/v2/pipe"
    )

- These projects vendor their dependencies.
    dotcloud/docker    coreos/etcd    bradfitz/camlistore

* seneca: Future

.image eastwood.gif 250 426

- Support subtitling (via `libass` in `ffmpeg`)
# Advanced Substation Alpha
- auto-upload

.link http://imgur.com/ imgur.com

- run `gifsicle` in pipeline

* Demo

.image buda-mine.gif

.link http://imgur.com/ZjWEev6 imgur.com/ZjWEev6
- Size: 4.2 MB

    > seneca -video-infile=C:\_programs\cygwin64\tmp\budapest.flv -vv 
             -port 8181 -from 00:01:19 -length=4s -speed=slower 

# -from 00:01:15 -length=3s

* Noteworthy software

.link http://godoc.org/labix.org/v2/pipe godoc.org/labix.org/v2/pipe
.link https://launchpad.net/tomb launchpad.net/tomb
.link http://godoc.org/git.tideland.biz/goas/loop godoc.org/git.tideland.biz/goas/loop
.link https://github.com/bradfitz/iter github.com/bradfitz/iter
.link https://github.com/niemeyer/gopkg github.com/niemeyer/gopkg
.link https://github.com/coreos/etcd github.com/coreos/etcd
