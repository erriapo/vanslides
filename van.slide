Creating Animated GIFs
Golang Vancouver meetup 
9 Apr 2014

Gavin <raverunner@gmail.com> 
@javouhey
Hire me!

* Motivation

- seneca's mission statement 

    Cli tool to generate small animated GIFs from youtube videos

- Cross-platform
# I develop on ubuntu & test on windows
- Gives progress feedback to user
- Simple & naive
- A few *lessons* from hacking with `seneca`:

    - empty structs
    - type safe Enums
    - Channel cancellation
    - Reproducible builds

* GIF 1 (681 KB)

.link http://www.reddit.com/user/BigMurph26 www.reddit.com/user/BigMurph26

.image snake-costa-rica.gif

* GIF 2 (1.1 MB) 

.link http://www.reddit.com/user/hbeckwith www.reddit.com/user/hbeckwith

.image bladerunner.gif 

* GIF 3 (1.6 MB)

.link http://www.reddit.com/user/ARS_ www.reddit.com/user/ARS_

.image buda.gif 450 800

* How to create animated gifs

- Imagemagick
- gifsicle
- *ffmpeg*
   idiosyncrasies 
     - stderr
     - order of arguments
     - even dimensions

.image van/ffmpeg-logo.png

* What's in an animated GIF ? (4 MB)

.image kenyan.gif 170 290

.link http://youtu.be/mTMgIViinuQ youtu.be/mTMgIViinuQ 

    $ gifsicle -I moses-animated.gif
    
    36 images
    logical screen 426x238
    loop forever
    + image #0 426x238 local color table [256]
      disposal asis delay 0.05s
    + image #1 426x238 local color table [256]
      disposal asis delay 0.06s
    ....snipped....

* Costa Rican snake

.code van/snake.go 

* seneca: Process of creation

1. Install seneca & ffmpeg

.link http://ffmpeg.org/ ffmpeg.org
.link https://github.com/javouhey/seneca github.com/javouhey/seneca

2. Download mp4 / flv

    $ youtube-dl -f 18 <video_url>

3. Trial & error until we get a reasonably sized GIF. Size depends on roughly 3 things.
# Number of frames
# Dimensions of the frames
# Color depth of each frame (8 bits max)

    $ seneca -video-infile=moses.mp4 -from 00:01:00 -length 5s -vv -dry-run

    Video metadata
    --------------
       Duration: 145
    Size  (wxh): 426x240
    Fps (Hertz): 23.980000

4. Optimize generated animated GIF using tools e.g. gifsicle

* Changing speed (slow=3.7MB vs. veryfast=1.5MB)

.image slower-3s-moses-18.gif 156 280 
.code van/moses-slow.go HLspe

.image veryfast-moses-18.gif 156 280
.code van/moses-veryfast.go HLsp2

* Lesson #1: empty struct

- speed argument checker using a map

* Scaling (4.9MB)

.image zlatan.gif 200 290

- Initial attempted at 6MB rejected by imgur.
.code van/zlatan.go HLspe
- The *"_"* placeholder tells ffmpeg to calculate that dimension.
    -scale _:_     (means no scaling)
    -scale 203:405 (INVALID to ffmpeg)

* Lesson #2: Typed safe Enums

Unicorn

* Lesson #3: Building HTTP servers is a cinch

- *Problem* `ffmpeg` may take a long time to complete.
- *Solution*

    $ ffmpeg -progress http://host:port ...

Listen for pings:

    POST / HTTP/1.1
    Transfer-Encoding: chunked
    User-Agent: Lavf/55.30.100

    84
    frame=0
    drop_frames=0
    progress=continue

    ...snipped...

    89
    frame=108
    drop_frames=103
    progress=end

* Lesson #3: Goroutine HTTP Listener (cont.)
# why is it a pointer to channel. Can it be normal reference type ?
.code van/progress.go 

- *Responsibilities*: 
- ... Listens for `ffmpeg` pings on port 8080 (default)
- ... Forwards statuses to the Status Logger.

* Lesson #3: Goroutine Status Logger (cont.)

.code van/statuslogger.go 

- Output:

    54 77 104 Completed
    72 91 120 Completed
    33 60 82 108 Completed

- It is not necessary to close channels. (_Discuss_)
#do close the channel iff some receivers are expecting it.
- A closed channel can only be read from, writing to it panics. (_Discuss_) 
#in seneca, I close the TCP listener first before closing the channel
#closing should be done by the sender, never the receiver.

* Communicating with goroutines

- `ffmpeg` pipeline

.image van/pipeline.png 250 500

- *Goal* each stage is an executing goroutine
- q1) How do I know if an error happened ?
- q2) How do I wait for it to complete ?
- q3) How to cancel a running goroutine ? 

* Communicating with goroutines (cont.)

- Stage 1: writes video frames to PNGs (q1 & q2)

.code van/task1.go

- method *Run* returns an unbuffered channel of type

    <-chan error

* Communicating with goroutines (cont.)

- Stage 2: h.264 encoding (q1 & q2)
- Returns error in a field

    type Muxer struct {
        err error
    }

- method *Run* returns a `sync.WaitGroup`

.code van/task2.go

* Closing channel as signalling

- A receive operation on a closed channel never blocks.
- For a closed channel *c*, `ok` is `false`:

    x, ok := <- c

- *Example*: generator of _even_ numbers
# zero is even

.code van/even1.go

* Closing channel as signalling (cont.)

.code van/even2.go

Output

.code van/even3.go

* Communicating with goroutines (cont.)

- Stage 3: Stitching up the GIF
- The `tomb` package encapsulates the goroutine signalling pattern

.code van/tomb.go

- wait for the completion

.code van/tomb3.go

* Communicating with goroutines (cont.)

- Cooperatively stop a running goroutine 

.code van/tomb4.go

- Check for the cancellation signal

.code van/tomb2.go

* Lesson #4: build process

- Desire #1: Ability to maintain a symbolic version:

   $ seneca -version

Output:

   Seneca version 1.0.0-beta3, git SHA 4d95362aff7a9a5ab1b9cd677c272c10e3b52a09

- Desire #2: Reduce the size of the binary
.link https://code.google.com/p/go/issues/detail?id=6853 Issue 6853 too big and growing

.image van/exe-size.png

* Lesson #4: build process (cont.)

.image van/dir-mysources.png

* Lesson #4: build process (cont.)

.image van/dir-src-symbolic-link.png

.code van/build.go

Inspired by:

.link https://github.com/coreos/etcd github.com/coreos/etcd

* Lesson #5: Reproducible builds

ahah

* Potpourri 

- Cross-platform functions only in `"path/filepath"`
- Should I `panic` ?
- .. even when a package uses panic internally, its external API still presents explicit error return values.
    func (b *Buffer) WriteString(s string) (n int, err error)
- .. err is always nil. If the buffer becomes too large, WriteString will panic with ErrTooLarge. 
- placeholder

* seneca: Future

.image eastwood.gif 300 500

- Support for subtitles (via `libass` in ffmpeg)
# Advanced Substation Alpha
- auto-upload to _imgur.com_
- run `gifsicle` in pipeline

* Demo

.image buda-mine.gif

.link http://imgur.com/ZjWEev6 imgur.com/ZjWEev6
- Size: 4.2 MB

    > seneca -video-infile=C:\_programs\cygwin64\tmp\budapest.flv -vv 
             -port 8181 -from 00:01:19 -length=4s -speed=slower 

# -from 00:01:15 -length=3s
